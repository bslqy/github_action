# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "feature/*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env: 
  ecrBuild: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  CI:
    # This workflow contains a single job called "build"
    name: "step CI DEV"
    environment: dev
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Repo
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3
        
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          echo ::set-output name=DESTROY::${destroy}
          echo ::set-output name=ECRBUILD::${ecrBuild}
          echo ${ecrBuild}

      - name: Set Image Name
        id: set_image_name
        run: |
          echo "::set-output name=image_name::$(echo ${GITHUB_REPOSITORY} | awk  -F / '{print $2}')"
          echo ${GITHUB_REPOSITORY}
      - name: Set image tag
        id: set_image_tag
        run: echo "::set-output name=image_tag::${GITHUB_SHA::8}"   
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo dev environment

    outputs:
      DESTROY: ${{ steps.vars.outputs.DESTROY }}
      ECRBUILD: ${{ steps.vars.outputs.ECRBUILD }}
      IMAGE_NAME: ${{ steps.set_image_name.outputs.image_name }}
      IMAGE_TAG: ${{ steps.set_image_tag.outputs.image_tag }}
  
  DOCKER_IMAGE:
    name: "Docker image deployment"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - CI
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials from cicd account account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-duration-seconds: 1200
          role-skip-session-tagging: true

      - name: Login to Amazon ECR (we need to push the terraform image to ECR)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.CI.outputs.IMAGE_NAME }}
          IMAGE_TAG: ${{ needs.CI.outputs.IMAGE_TAG }}

        working-directory: ./test
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


